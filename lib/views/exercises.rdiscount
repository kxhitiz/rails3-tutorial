#### {% title "Ćwiczenia" %}

# Ćwiczenia

<blockquote>
<p>
  Blueprint is a CSS framework designed to cut down on your CSS
  development time.
</p>
<p class="author">— Joshua Clayton</p>
</blockquote>

## BlueprintCSS

1\. Przygotować stronę ilustrującą możliwości frameworka
Blueprint. Zacząć od ściągnięcia 
[repozytorium Blueprint] [blueprint-css] z Githuba.

Użyć narzędzia *compress.rb* do wygenerowania własnych 
wersji arkuszy CSS. Przeczytać:
[Blueprint's compress.rb: A Walkthrough](http://joshuaclayton.github.com/article/2009/05/19/blueprint-css-a-walkthrough.html).

2\. Zainstalować rozszerzenie do Firefoksa:
[Dust-Me Selectors](https://addons.mozilla.org/en-US/firefox/addon/5392).
Korzystając z tego rozszerzenia, oczyścić arkusz CSS z nieużywanych
selektorów.

3\. Zwalidować HTML i CSS.

4\. Zainstalować rozszerzenia do przeglądarki Firefox:

   * [Firebug](https://addons.mozilla.org/en-US/firefox/addon/1843) 
   * [YSlow](http://developer.yahoo.com/yslow/).

Użyć Yslow do oceny strony przygotowanej w 1\.

Każde rozwiązanie opisać w jblogu pod tytułem *blueprint-css*.


<blockquote cite="http://haml-lang.com/">
<p>
  Haml is based on one primary principle. 
  <em>Markup should be beautiful.</em>
</p>
</blockquote>

## HAML & SASS

1\. Przepisujemy HTML na [HAML] [haml]:
„Haml takes your gross, ugly templates and replaces 
them with veritable Haiku.”

Walidujemy wygenerowany HTML. Sprawdzamy 
za pomocą YSlow czy zmieniła się ocena strony.

2\. Przepisujemy CSS na [SASS] [sass]: 
„Sass makes CSS fun again.”

Walidujemy wygenerowany CSS. 

Opisujemy swoje doświadczenia w jblogu pod tytułem *haml-sass*.


<blockquote>
 <p>
  {%= image_tag "/images/wesole_kontakty.jpg", :alt => "[wesołe kontakty]" %}
 </p>
 <p class="author">Wesołe kontakty</p>
</blockquote>

## Moje kontakty

1\. Generujemy szablon aplikacji Rails o nazwie *kontakty*.  Aplikacja
*kontakty* powinna umożliwiać wpisywanie, edycję kontaktów: imię,
nazwisko, email, www, adres, itp.

Użyć YSLow do oceny wygenerowanych stron. Zapisać wyniki w jblogu.

2\. [Install any HTML theme/template into your Rails 
app](http://drnicwilliams.com/2009/10/06/install-any-html-themetemplate-into-your-rails-app/):
„But how do we install *theme template* to our Rails apps?  I don’t 
know. It sucks. And it takes more time than it should. Here’s my idea
– a tool to install any HTML template into your Rails app. To treat
any HTML template as if it was a «Ruby on Rails HTML Template».
So I’ve started to try and make any «HTML Template» into a 
«Ruby on Rails Template» with the helper app *install_theme*.

<blockquote>
 <p>
  Have you ever even bothered to Google for “rails html template”? 
 </p>
 <p class="author">— Dr Nic</p>
</blockquote>

Wyszukać w sieci darmowy szablon, albo przygotować go
samemu. Zainstalować za go pomocą programu *install_theme*.
Jak to się robi, opisano w blogu we wpisie wspomnianym powyżej.

3\. Dodać *gravatary* do aplikacji (użyć migracji). 
Skorzystać z jakiegoś gemu lub jakiejś wtyczki, na przykład
[Ruby on Rails Gravatar Plugin](http://mdeering.com/posts/022-ruby-on-rails-gravitar-plugin).

Albo zamiast wtyczki skorzystać z pomysłu przedstawionego
w [Railscasts \#182](http://railscasts.com/episodes/182-cropping-images).
W tym screencaście, R. Bates pokazuje jak
dodać do aplikacji bajerancki interfejs umożliwiający przycinanie 
obrazków przed umieszczeniem ich w bazie danych.
Dodać taką funkcjonalność do budowanej aplikacji.

4\. Wersja 3.5 Firefoxa obsługuje 
[W3C Geolocation API](http://dev.w3.org/geo/api/spec-source.html).
Korzystając z wtyczki
[GeoMereLaal](http://github.com/parolkar/geo_mere_laal) 
dodać Geolocation do aplikacji.

<blockquote>
<p>
  We send down exactly one .js and one .css file. If you are sending
  down more than one of each of these to the browser, you have a
  performance problem. Fix it with asset packager.
</p>
<p class="author">— Pivotal Labs</p>
</blockquote>

5\. Skompresować *static assets* za pomocą wtyczki
[Asset Packager] [asset-packager]: 
„JavaScript and CSS Asset Compression for **Production** Rails Apps.”
Używamy YSLow do oceny strony korzystającej z tej wtyczki.
Zapisać wyniki w jblogu.

Opisać swoje doświadczenia z pkt. 1–4 w jblogu pod tytułem
*pierwsze-koty-za-ploty*.

5\. [Cytat] [compass]:
„Compass is a Stylesheet Authoring Environment that makes your
website design simpler to implement and easier to maintain.”
Przeczytać do czego można użyć tego narzędzia.

<blockquote>
 <p>
  {%= image_tag "/images/ken-arnold.jpg", :alt => "[Ken Arnold]" %}
 </p>
 <p>A fortune program first appeared in Version 7 Unix. The most common
  version on modern systems is the BSD fortune, originally written by
  Ken Arnold. [source Wikipedia]</p>
</blockquote>

## Szlifujemy Fortunkę

1\. Utworzyć nową stronę główną aplikacji.
  Umieścić na niej po jednym losowym cytacie
  z każdej kategorii oraz linki do stron
  z indeksami kategorii.

2\. Zaimplementować tagowanie obrazków tak jak to jest pokazane na screencaście 
  [More on Virtual Attributes](http://railscasts.com/episodes/167-more-on-virtual-attributes).

3\. Jeszcze raz otagować obrazki. Tym razem skorzystać z
  [Acts As Taggable on Steroids Ruby On Rails Plugin With 
  Paginate](http://burm.net/2008/10/08/acts-as-taggable-on-steroids-ruby-on-rails-plugin-with-paginate/)


## Stylizacja Leniwca

1\. Do strony z wynikami wyszukiwania dodać paginację.
Skorzystać z gemu 
[mislav-will-paginate](http://github.com/mislav/will_paginate/).

2\. Do wyszukiwarki dodać select-menu z listą języków
obsługiwanych przez gem *Ultraviolet*
(`uv -l syntaxes`). Zmodyfikować kod *leniwca.local*, tak aby
było możliwe wyszukiwanie fragmentów kodu z wybranego
języka. Wskazówka: objerzeć screencast 
[Advanced Search Form](http://railscasts.com/episodes/111-advanced-search-form)
Uwaga: na liście języków umieścić „Wszystkie języki”,
„Języki skryptowe“ i „Języki kompilowane”.

3\. Wpisać listę wszystkich języków do tabelki *languages*.
Do select-menu pobrać tę listę z tej tabelki.

4\. Dodać „full text search”. Wykorzystać gem 
[xapit](http://github.com/ryanb/xapit/) albo
[thinking-sphinx](http://github.com/freelancing-god/thinking-sphinx/).
Przykład korzystający *thinking-sphinx* można obejrzeć
na screencaście R. Batesa, 
[Thinking Sphinx](http://railscasts.com/episodes/120-thinking-sphinx).

5\. Użyć innego ORM, np. Datamapper
\([przykład](http://github.com/dkubb/datamapper-on-rails/)\).


## Z życia leniwców

[A code snippet tool, intended for localhost usage](http://github.com/navyrain/navysnip/).
Add the following:

* Command line submission script
* Doubleclick to select all
* Submit-to-pastie button
* Search
* Add Rails-ish parsers to SHJS (erb, haml, sass)
* Tweak the PRE CSS or do something clever with wrapping 
  to make long lines display nicely


## Photo Album

1\. [Extremely Simple Photo Album in 
  Rails](http://rubyplus.org/episodes/92-Extremely-Simple-Photo-Album-in-Rails.html)

* You can extend this album so that the photo upload does not tie up
  the Mongrel process by using Background DRB, Merb etc.
* Add the feature where users can only add/edit photos to their album.
* When a photo is added instead of displaying the album index page,
  display the album show page so that users can continue uploading
  photos.


#### Links

[blueprint-css]: http://github.com/joshuaclayton/blueprint-css "A CSS framework"
[haml]: http://haml-lang.com/ "HAML: markup haiku"
[sass]: http://sass-lang.com/ "Sass makes CSS fun again"
[asset-packager]: http://github.com/sbecker/asset_packager "CSS and Javascript asset packager"
[compass]: http://github.com/chriseppstein/compass "A CSS stylesheet authoring environment"
