#### {% title "Layouts" %}

# Layouts – czyli układy graficzne

Co oznacza słowo *layout*: 

* makieta, układ graficzny strony, okładki, książki
* rozmieszczenie, rozplanowanie elementów na stronie
* rozkład, plan techniczny, kompozycja

*Rails Guides*,
[Layouts and Rendering in Rails](http://guides.rubyonrails.org/layouts_and_rendering.html) –
This guide covers the basic layout features of Action Controller and Action View. 


## Layout dla aplikacji

Layout dla aplikacji umieszczamy w pliku
*app/views/layouts/application.html.erb*.

Generator *nifty_layout* z gemu *nifty_generators* wygeneruje nam taki
prosty layout automatycznie. Dodatkowo w pliku
*app/helpers/layout_helper.rb* umieści kilka użytecznych metod:

    :::ruby
    module LayoutHelper
      def title(page_title, show_title = true)
        @content_for_title = page_title.to_s
        @show_title = show_title
      end
      def show_title?
        @show_title
      end
      def stylesheet(*args)
        content_for(:head) { stylesheet_link_tag(*args) }
      end
      def javascript(*args)
        content_for(:head) { javascript_include_tag(*args) }
      end
    end

A oto wygenerowany layout *application.html.erb* (po małym liftingu do html5): 

    :::html_rails
    <!doctype html>
    <html>
      <head>
        <meta charset="utf-8" />
        <title><%= h(yield(:title) || "Untitled") %></title>
        <%= stylesheet_link_tag 'application' %>
        <%= yield(:head) %>
      </head>
      <body>
        <div id="container">
          <%- flash.each do |name, msg| -%>
            <%= content_tag :div, msg, :id => "flash_#{name}" %>
          <%- end -%>

          <%- if show_title? -%>
            <h1><%=h yield(:title) %></h1>
          <%- end -%>

          <%= yield %>
        </div>
      </body>
    </html>


## Layout dla kontrolera

TODO: Przykłady layoutu dla kontrolera:

* dodajemy controler PagesController
* kopiujemy application.html.erb na pages.html.erb
  i modyfikujemy

Dodatkowo, przykład prostego triku/refaktoryzacji:

* korzystamy z css layout nifty helpers: content_for


## Aktywne zakładki

Tak ma wyglądać element z zakładkami, gdy jesteśmy na stronie *Homepage*:

    :::html
    <div id="mainMenu">
      <ul>
        <li class="active"><a href="/home"><span>Homepage</span></a></li>
        <li><a href="/about"><span>About us</span></a></li>
        <li><a href="/contact"><span>Contact</span></a></li>
      </ul>
    </div>

Elementowi listy z *homepage* dodajemy klasę *active*.

A tak chcielibyśmy, to wpisywać w *views/layouts/application.html.erb*:

    :::html_rails
    <div id="mainMenu">
      <%= navigation ['/home', 'Homepage'], 
                     ['/about', 'About us'], 
                     ['/contact', 'Contact'] %>
    </div>

A tak to zakodujemy w pliku *helpers/layout_helper.rb*:

    :::ruby
    def navigation(*data)
      content_tag :ul do
        data.map do |link, name|
          content_tag :li, link_to("<span>#{name}</span>", link),
              :class => ("active" if controller.controller_name == link[1,link.length])
        end
      end
    end

Czasami zamiast `controller.controller_name` będzie nam lepiej pasować
`controller.action_name`.

Gotowy przykład, zob. *labs/003-Tabbed_Navigation*.

Na koniec kilka linków:

* [Selected Tab Navigation](http://railsforum.com/viewtopic.php?id=30174)
* [TabsOnRails: Creating and managing Tabs with Ruby on Rails](http://code.simonecarletti.com/projects/tabsonrails/wiki)
