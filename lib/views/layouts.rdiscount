#### {% title "Layouts" %}

# Layouts – czyli układy graficzne

Co oznacza słowo *layout*: 

* makieta, układ graficzny strony, okładki, książki
* rozmieszczenie, rozplanowanie elementów na stronie
* rozkład, plan techniczny, kompozycja

*Rails Guides*,
[Layouts and Rendering in Rails](http://guides.rubyonrails.org/layouts_and_rendering.html) –
This guide covers the basic layout features of Action Controller and Action View. 


## Layout dla aplikacji

Layout dla aplikacji umieszczamy w pliku
*app/views/layouts/application.html.erb*.

Generator *nifty_layout* z gemu *nifty_generators* wygeneruje nam taki
prosty layout automatycznie. Dodatkowo w pliku
*app/helpers/layout_helper.rb* umieści kilka użytecznych metod:

    :::ruby
    module LayoutHelper
      def title(page_title, show_title = true)
        @content_for_title = page_title.to_s
        @show_title = show_title
      end
      def show_title?
        @show_title
      end
      def stylesheet(*args)
        content_for(:head) { stylesheet_link_tag(*args) }
      end
      def javascript(*args)
        content_for(:head) { javascript_include_tag(*args) }
      end
    end

A oto wygenerowany layout *application.html.erb* (po małym liftingu do html5): 

    :::html_rails
    <!doctype html>
    <html>
      <head>
        <meta charset="utf-8" />
        <title><%= h(yield(:title) || "Untitled") %></title>
        <%= stylesheet_link_tag 'application' %>
        <%= yield(:head) %>
      </head>
      <body>
        <div id="container">
          <%- flash.each do |name, msg| -%>
            <%= content_tag :div, msg, :id => "flash_#{name}" %>
          <%- end -%>

          <%- if show_title? -%>
            <h1><%=h yield(:title) %></h1>
          <%- end -%>

          <%= yield %>
        </div>
      </body>
    </html>


## Aktywne zakładki

Dla przykładu, przyjmijmy, że na każdej stronie naszej aplikacji
wyświetlamy trzy zakładki *Homepage*, *About us* oraz *Contact*,
a kod elementu HTML z zakładkami, gdy jesteśmy na stronie *Homepage*
ma wyglądać tak:

    :::html
    <div id="mainMenu">
      <ul>
        <li class="active"><a href="/home">Homepage</a></li>
        <li><a href="/about">About us</a></li>
        <li><a href="/contact">Contact</a></li>
      </ul>
    </div>

czyli element listy *ul* z linkiem do strony na której aktualnie jesteśmy
powinien mieć dodany atrybut **class** ustawiony na **active**.

A tak chcielibyśmy, to wpisać layoucie *views/layouts/application.html.erb*:

    :::html_rails
    <div id="mainMenu">
      <%= navigation ['/home','Homepage'],['/about','About us'],['/contact','Contact'] %>
    </div>

Poniższy kod, po wpisaniu w *helpers/layout_helper.rb*, realizuje takie podejście:

    :::ruby
    def navigation(*data)
      content_tag :ul do
        data.map do |link, name|
          content_tag :li, link_to("#{name}", link),
              :class => ("active" if controller.controller_name == link[1,link.length])
        end
      end
    end

Gotowy przykład, zob. *labs/003-Tabbed_Navigation*.

Na koniec kilka linków na ten temat:

* [Selected Tab Navigation](http://railsforum.com/viewtopic.php?id=30174)
* [TabsOnRails: Creating and managing Tabs with Ruby on Rails](http://code.simonecarletti.com/projects/tabsonrails/wiki)


## Zagnieżdzone layouty z *content_for*

W powyższym przykładzie każdy z kontrolerów:

* HomeController
* AboutController
* ContactController

używa tego samego layoutu – *application.html.erb*.

Przypuśćmy, że layouty dla kontrolerów muszą się nieco różnić,
dla przykładu – kolorem tła.

Zamiast powielenia i edycji *layouts/application.html.erb* można
postąpić tak. Tworzymy plik *layouts/about.html.erb* o zawartości:

    :::html_rails
    <% content_for :head do %>  
      <style>
        #background { background-color: #956E6F; }
      </style>
    <% end -%> 
    <%= render :file => 'layouts/application' %>

i według tego schematu tworzymy plik *layouts/contact.html.erb*.


## What is sitemaps and why make a good use of that?

Odpowiedzi udzielił [stJhimy](http://www.stjhimy.com/posts/2).

Przykładowy plik:

    :::xml
    <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"> 
      <url> 
        <loc>http://sinatra.local/rails3/</loc> 
        <priority>1.0</priority> 
      </url> 
      <url> 
        <loc>http://sinatra.local/rails3/fortunes/1</loc> 
        <priority>1.0</priority> 
      </url>
    </urlset>

Taki plik wygenerujemy korzystając z *XMLbuilder*:

    :::ruby
    xml.instruct!
    xml.urlset "xmlns" => "http://www.sitemaps.org/schemas/sitemap/0.9" do

      xml.url do
        xml.loc "http://sinatra.local/fortunes" # wstawiamy swój adres 
        xml.priority 1.0
      end
      # dodajemy wszystkie fortunki (wystarczyłby indeks)
      @fortunes.each do |fortune|
        xml.url do
          xml.loc fortune_url(fortune)
          xml.priority 1.0
        end
      end
      # można dodać więcej linków, dla przykładu
      @posts.each do |post|
        xml.url do
          xml.loc post_url(post)
          xml.lastmod post.updated_at.to_date
          xml.priority 0.61
        end
      end
    end

Wcześniej definiujemy `@fortunes` i dodajemy routing, np.

    http://sinatra.local/fortunes/sitemap.xml

Na koniec uaktywnaimy sitemap dopisując w pliku *public/robots.txt*:

    Sitemap: http://sinatra.local/fortunes/sitemap.xml

Albo wykonujemy ping:

    www.google.com/webmasters/tools/ping?sitemap=http://sinatra.local/fortunes/sitemap.xml
